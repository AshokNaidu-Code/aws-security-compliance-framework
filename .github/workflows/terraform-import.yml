name: Terraform Import Existing Resources

on:
  workflow_dispatch:
    inputs:
      resource_type:
        description: 'Resource Type to Import'
        required: true
        type: choice
        options:
          - all
          - s3_buckets
          - iam_roles
          - guardduty
          - kms_keys
      dry_run:
        description: 'Dry Run (only discover, do not import)'
        required: true
        type: boolean
        default: true

permissions:
  id-token: write
  contents: write
  pull-requests: write

env:
  TF_VERSION: '1.6.0'
  AWS_REGION: 'us-east-1'
  WORKING_DIR: './infrastructure/terraform'

jobs:
  discover-resources:
    name: Discover Existing Resources
    runs-on: ubuntu-latest
    outputs:
      resources: ${{ steps.discover.outputs.resources }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}
      
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      
      - name: Install Dependencies
        run: |
          pip install boto3
      
      - name: Discover Existing Resources
        id: discover
        run: |
          python3 << 'EOF'
          import boto3
          import json
          
          # Initialize AWS clients
          s3 = boto3.client('s3')
          iam = boto3.client('iam')
          guardduty = boto3.client('guardduty')
          kms = boto3.client('kms')
          
          discovered_resources = {
              's3_buckets': [],
              'iam_roles': [],
              'guardduty_detectors': [],
              'kms_keys': []
          }
          
          resource_type = '${{ github.event.inputs.resource_type }}'
          
          # Discover S3 Buckets
          if resource_type in ['all', 's3_buckets']:
              try:
                  buckets = s3.list_buckets()['Buckets']
                  for bucket in buckets:
                      bucket_name = bucket['Name']
                      if 'prod-' in bucket_name or 'config' in bucket_name or 'cloudtrail' in bucket_name or 'guardduty' in bucket_name:
                          discovered_resources['s3_buckets'].append(bucket_name)
                          print(f"Found S3 Bucket: {bucket_name}")
              except Exception as e:
                  print(f"Error discovering S3 buckets: {e}")
          
          # Discover IAM Roles
          if resource_type in ['all', 'iam_roles']:
              try:
                  roles = iam.list_roles()['Roles']
                  for role in roles:
                      role_name = role['RoleName']
                      if 'prod-' in role_name or 'security' in role_name or 'config' in role_name or 'lambda' in role_name:
                          discovered_resources['iam_roles'].append(role_name)
                          print(f"Found IAM Role: {role_name}")
              except Exception as e:
                  print(f"Error discovering IAM roles: {e}")
          
          # Discover GuardDuty Detectors
          if resource_type in ['all', 'guardduty']:
              try:
                  detectors = guardduty.list_detectors()['DetectorIds']
                  for detector_id in detectors:
                      discovered_resources['guardduty_detectors'].append(detector_id)
                      print(f"Found GuardDuty Detector: {detector_id}")
              except Exception as e:
                  print(f"Error discovering GuardDuty detectors: {e}")
          
          # Discover KMS Keys
          if resource_type in ['all', 'kms_keys']:
              try:
                  keys = kms.list_keys()['Keys']
                  for key in keys:
                      key_id = key['KeyId']
                      key_metadata = kms.describe_key(KeyId=key_id)['KeyMetadata']
                      if key_metadata.get('KeyState') == 'Enabled':
                          discovered_resources['kms_keys'].append(key_id)
                          print(f"Found KMS Key: {key_id}")
              except Exception as e:
                  print(f"Error discovering KMS keys: {e}")
          
          # Save to file
          with open('discovered_resources.json', 'w') as f:
              json.dump(discovered_resources, f, indent=2)
          
          print("\n=== Discovery Summary ===")
          print(f"S3 Buckets: {len(discovered_resources['s3_buckets'])}")
          print(f"IAM Roles: {len(discovered_resources['iam_roles'])}")
          print(f"GuardDuty Detectors: {len(discovered_resources['guardduty_detectors'])}")
          print(f"KMS Keys: {len(discovered_resources['kms_keys'])}")
          EOF
      
      - name: Upload Discovery Report
        uses: actions/upload-artifact@v4
        with:
          name: discovered-resources
          path: discovered_resources.json
          retention-days: 7
  
  import-resources:
    name: Import Resources to Terraform
    runs-on: ubuntu-latest
    needs: discover-resources
    if: github.event.inputs.dry_run == 'false'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}
      
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}
      
      - name: Download Discovery Report
        uses: actions/download-artifact@v4
        with:
          name: discovered-resources
      
      - name: Generate Import Commands
        run: |
          python3 << 'EOF'
          import json
          
          with open('discovered_resources.json', 'r') as f:
              resources = json.load(f)
          
          import_commands = []
          
          # Generate S3 import commands
          for bucket in resources.get('s3_buckets', []):
              if 'config' in bucket:
                  import_commands.append(f"terraform import aws_s3_bucket.config_bucket {bucket}")
              elif 'cloudtrail' in bucket:
                  import_commands.append(f"terraform import module.cloudtrail.aws_s3_bucket.cloudtrail {bucket}")
              elif 'guardduty' in bucket:
                  import_commands.append(f"terraform import module.guardduty.aws_s3_bucket.guardduty_findings {bucket}")
          
          # Generate IAM Role import commands
          for role in resources.get('iam_roles', []):
              if 'lambda-guardduty' in role:
                  import_commands.append(f"terraform import aws_iam_role.lambda_guardduty_response {role}")
              elif 'aws-config-role' in role:
                  import_commands.append(f"terraform import module.config.aws_iam_role.config {role}")
              elif 'security-operations' in role:
                  import_commands.append(f"terraform import module.iam.aws_iam_role.security_operations {role}")
              elif 'compliance-auditor' in role:
                  import_commands.append(f"terraform import module.iam.aws_iam_role.compliance_auditor {role}")
          
          # Generate GuardDuty import commands
          for detector_id in resources.get('guardduty_detectors', []):
              import_commands.append(f"terraform import module.guardduty.aws_guardduty_detector.main {detector_id}")
          
          # Save import commands
          with open('import_commands.sh', 'w') as f:
              f.write('#!/bin/bash\n')
              f.write('set -e\n\n')
              f.write('cd infrastructure/terraform\n')
              f.write('terraform init\n\n')
              for cmd in import_commands:
                  f.write(f'{cmd} || echo "Failed to import, continuing..."\n')
          
          print(f"Generated {len(import_commands)} import commands")
          EOF
          
          chmod +x import_commands.sh
      
      - name: Execute Import Commands
        working-directory: ${{ env.WORKING_DIR }}
        run: |
          bash ../../import_commands.sh
        continue-on-error: true
      
      - name: Create Pull Request with Updated State
        uses: peter-evans/create-pull-request@v6
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: 'chore: Import existing AWS resources to Terraform state'
          branch: terraform-import-${{ github.run_number }}
          title: 'ðŸ”„ Import Existing Resources to Terraform'
          body: |
            ## Terraform Import Summary
            
            This PR imports existing AWS resources into Terraform state.
            
            **Resource Type:** ${{ github.event.inputs.resource_type }}
            **Workflow Run:** ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
            
            ### Resources Imported
            Check the workflow logs for details on imported resources.
            
            ### Next Steps
            1. Review the changes
            2. Merge this PR to update the Terraform state
            3. Run `terraform plan` to verify no changes needed
          labels: terraform, automation, import
